esphome:
  name: "itho-fan-control"
  friendly_name: itho-fan-control

  includes: 
      - itho.h
  libraries: 
      - SPI
      - https://github.com/jodur/ITHO-Lib#NewLib

# Idlist[0]={"51,40,61","Badkamer"};
# Idlist[1]={"73,82,11","Toilet"};
# Idlist[2]={"ID3","ID3"};

  on_boot:
      then:
        - lambda: |-
            Idlist[0]={"50,d0,cd","IthoRemote"};
            Mydeviceid="Homeassistant"; 
            rf.setDeviceID(10,87,81); //ID for sending: 10,87,81 was used in old library
            id(output_fan_speed_low).turn_on(); //This ensures fan is at low-speed at boot

esp8266:
  board: nodemcuv2
  framework:
    version: recommended

# Enable logging
logger:
#  level: VERBOSE #Enable this line to find out the ID of youre remote

# Enable Home Assistant API
api:
  encryption:
    key: !secret homeassistant_encryption_key


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "itho-fan-control"
    password: !secret ap_fallback_password

captive_portal:

ota:
  on_begin:
    then:
      - lambda: |-
          ESP_LOGI("custom", "Disable Interrupts, to allow OTA without intterupts");
          detachInterrupt(D1);
          delay(500);

output:
  - platform: custom
    type: binary
    lambda: |-
      auto fan_speed_low = new FanSpeedLow();
      App.register_component(fan_speed_low);
      return {fan_speed_low};

    outputs:
      id: output_fan_speed_low

  - platform: custom
    type: binary
    lambda: |-
      auto fan_speed_medium = new FanSpeedMedium();
      App.register_component(fan_speed_medium);
      return {fan_speed_medium};

    outputs:
      id: output_fan_speed_medium

  - platform: custom
    type: binary
    lambda: |-
      auto fan_speed_high = new FanSpeedHigh();
      App.register_component(fan_speed_high);
      return {fan_speed_high};

    outputs:
      id: output_fan_speed_high

  - platform: custom
    type: binary
    lambda: |-
      auto fan_speed_max = new FanSpeedMax();
      App.register_component(fan_speed_max);
      return {fan_speed_max};

    outputs:
      id: output_fan_speed_max

  - platform: custom
    type: binary
    lambda: |-
      auto fan_set_timer_1 = new FanSetTimer1();
      App.register_component(fan_set_timer_1);
      return {fan_set_timer_1};

    outputs:
      id: output_fan_set_timer_1

  - platform: custom
    type: binary
    lambda: |-
      auto fan_set_timer_2 = new FanSetTimer2();
      App.register_component(fan_set_timer_2);
      return {fan_set_timer_2};

    outputs:
      id: output_fan_set_timer_2

  - platform: custom
    type: binary
    lambda: |-
      auto fan_set_timer_3 = new FanSetTimer3();
      App.register_component(fan_set_timer_3);
      return {fan_set_timer_3};

    outputs:
      id: output_fan_set_timer_3

  - platform: custom
    type: binary
    lambda: |-
      auto fan_join_remote_control = new FanJoinRemoteControl();
      App.register_component(fan_join_remote_control);
      return {fan_join_remote_control};

    outputs:
      id: output_fan_join_remote_control

button:
  - platform: restart
    name: "Restart"

  - platform: output
    name: "Fan Speed Low"
    id: button_fan_speed_low
    icon: mdi:fan-speed-1
    output: output_fan_speed_low
    duration: 500ms

  - platform: output
    name: "Fan Speed Medium"
    id: button_fan_speed_medium
    icon: mdi:fan-speed-2
    output: output_fan_speed_medium
    duration: 500ms

  - platform: output
    name: "Fan Speed High"
    id: button_fan_speed_high
    icon: mdi:fan-speed-3
    output: output_fan_speed_high
    duration: 500ms

  - platform: output
    name: "Fan Speed Max"
    id: button_fan_speed_max
    icon: mdi:fan
    output: output_fan_speed_max
    duration: 500ms

  - platform: output
    name: "Fan Set Timer 10 mins"
    id: button_fan_set_timer_1
    icon: mdi:fan-clock
    output: output_fan_set_timer_1
    duration: 500ms

  - platform: output
    name: "Fan Set Timer 20 mins"
    id: button_fan_set_timer_2
    icon: mdi:fan-clock
    output: output_fan_set_timer_2
    duration: 500ms

  - platform: output
    name: "Fan Set Timer 30 mins"
    id: button_fan_set_timer_3
    icon: mdi:fan-clock
    output: output_fan_set_timer_3
    duration: 500ms

  - platform: output
    name: "Join Remote Control"
    id: button_fan_join_remote_control
    icon: mdi:remote
    output: output_fan_join_remote_control
    duration: 500ms

text_sensor:
- platform: custom
  lambda: |-
    auto fanrecv = new FanRecv();
    App.register_component(fanrecv);
    return {fanrecv->fanspeed,fanrecv->fantimer,fanrecv->Lastid};
  text_sensors:
    - name: "Fan speed"
      icon: "mdi:fan"   
    - name: "Fan timer"
      icon: "mdi:timer"  
    - name: "Last remote"
      icon: "mdi:remote"